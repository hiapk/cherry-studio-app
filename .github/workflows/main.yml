name: Build iOS IPA
on:
  workflow_dispatch:

jobs:
  build-ios:
    runs-on: macos-14

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Xcode 16.1
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.1'

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Enable Corepack (Yarn 4)
        run: |
          corepack enable
          corepack prepare yarn@4.9.1 --activate

      - name: Install deps
        run: yarn install --immutable

      - name: Install CocoaPods
        run: sudo gem install cocoapods

      - name: Expo prebuild (iOS)
        run: |
          npx expo prebuild -p ios --no-install
          cd ios
          pod install --repo-update

      - name: Build app (Release, no signing) and package IPA
        id: build_ipa
        run: |
          set -e
          cd ios
          
          # Find workspace or project file
          WORKSPACE_FILE=$(find . -name "*.xcworkspace" -maxdepth 1 | head -n 1 | sed 's|^\./||' || true)
          PROJECT_FILE=$(find . -name "*.xcodeproj" -maxdepth 1 | head -n 1 | sed 's|^\./||' || true)
          
          echo "Found workspace: $WORKSPACE_FILE"
          echo "Found project: $PROJECT_FILE"

          if [ -n "$WORKSPACE_FILE" ] && [ -f "$WORKSPACE_FILE/contents.xcworkspacedata" ]; then
            echo "Using workspace: $WORKSPACE_FILE"
            SCHEME_NAME=$(xcodebuild -workspace "$WORKSPACE_FILE" -list | awk '/Schemes/{flag=1;next}/^$/{flag=0}flag' | head -n 1 | xargs)
            echo "Using scheme: $SCHEME_NAME"
            xcodebuild -workspace "$WORKSPACE_FILE" -scheme "$SCHEME_NAME" -configuration Release -sdk iphoneos \
              CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY="" \
              CONFIGURATION_BUILD_DIR="$(pwd)/build/Release-iphoneos" \
              build
          elif [ -n "$PROJECT_FILE" ] && [ -f "$PROJECT_FILE/project.pbxproj" ]; then
            echo "Using project: $PROJECT_FILE"
            SCHEME_NAME=$(xcodebuild -project "$PROJECT_FILE" -list | awk '/Schemes/{flag=1;next}/^$/{flag=0}flag' | head -n 1 | xargs)
            echo "Using scheme: $SCHEME_NAME"
            xcodebuild -project "$PROJECT_FILE" -scheme "$SCHEME_NAME" -configuration Release -sdk iphoneos \
              CODE_SIGNING_ALLOWED=NO CODE_SIGNING_REQUIRED=NO CODE_SIGN_IDENTITY="" \
              CONFIGURATION_BUILD_DIR="$(pwd)/build/Release-iphoneos" \
              build
          else
            echo "No valid .xcworkspace or .xcodeproj found."
            echo "Contents of ios directory:"
            ls -la
            exit 1
          fi

          # Find the built .app file in the specified build directory
          echo "Searching for .app file..."
          
          # First check the specified build directory
          BUILD_DIR="$(pwd)/build/Release-iphoneos"
          if [ -d "$BUILD_DIR" ]; then
            APP_PATH=$(find "$BUILD_DIR" -type d -name "*.app" | head -n 1 || true)
            echo "Build directory ($BUILD_DIR) search result: $APP_PATH"
          fi
          
          # If not found, try DerivedData as fallback
          if [ -z "$APP_PATH" ]; then
            APP_PATH=$(find ~/Library/Developer/Xcode/DerivedData -type d -name "*.app" | grep -E "/Build/Products/Release-iphoneos/" | head -n 1 || true)
            echo "DerivedData search result: $APP_PATH"
          fi
          
          # If not found, try local build directory
          if [ -z "$APP_PATH" ]; then
            APP_PATH=$(find . -type d -name "*.app" | head -n 1 || true)
            echo "Local build search result: $APP_PATH"
          fi
          
          # If still not found, search more broadly
          if [ -z "$APP_PATH" ]; then
            echo "Searching more broadly for .app files..."
            find . -name "*.app" -type d 2>/dev/null | head -5
            APP_PATH=$(find . -name "*.app" -type d 2>/dev/null | head -n 1 || true)
            echo "Broad search result: $APP_PATH"
          fi
          
          if [ -z "$APP_PATH" ]; then
            echo "No .app found. Listing build directory contents:"
            ls -la "$BUILD_DIR" 2>/dev/null || echo "Build directory does not exist"
            echo "Listing current directory contents:"
            ls -la
            echo "Searching for any build artifacts:"
            find . -name "*" -type d | grep -i build | head -10
            exit 1
          fi
          
          echo "Using .app file: $APP_PATH"

          cd "$(dirname "$APP_PATH")"
          rm -rf Payload
          mkdir -p Payload
          cp -R "$(basename "$APP_PATH")" Payload/
          zip -r app.ipa Payload
          echo "IPA_PATH=$(pwd)/app.ipa" >> $GITHUB_OUTPUT

      - name: Upload IPA
        uses: actions/upload-artifact@v4
        with:
          name: cherry-studio-ios-ipa
          path: ${{ steps.build_ipa.outputs.IPA_PATH }}
